{"version":3,"file":"polpware-ngx-net-crud.mjs","sources":["../../../../projects/polpware/ngx-net-crud/src/lib/services/observable-crud.service.ts","../../../../projects/polpware/ngx-net-crud/src/lib/services/observable-duet-table.service.ts","../../../../projects/polpware/ngx-net-crud/src/public_api.ts","../../../../projects/polpware/ngx-net-crud/src/polpware-ngx-net-crud.ts"],"sourcesContent":["import { Injector } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { liftIntoReject } from '@polpware/fe-utilities';\n\nimport { toPromise } from '@polpware/ngx-rxjs';\n\nimport {\n    GlobalEventsService\n} from '@polpware/ngx-events';\n\nimport {\n    ISpinnerService,\n    NullSpinner\n} from '@polpware/ngx-spinner';\n\nimport {\n    IBaseEntity\n} from '@polpware/ngx-model';\n\nexport {\n    IBaseEntity\n} from '@polpware/ngx-model';\n\nexport abstract class ObservableCurdService<T extends IBaseEntity> {\n\n    protected subject: BehaviorSubject<Array<T>>;\n\n    protected http: HttpClient;\n    protected eventsService: GlobalEventsService;\n    protected spinner: ISpinnerService;\n\n    protected withCredentialOnRequest: boolean;\n\n    constructor(injector: Injector) {\n\n        this.withCredentialOnRequest = true;\n\n        this.subject = new BehaviorSubject([]);\n\n        this.http = injector.get(HttpClient);\n        this.eventsService = injector.get(GlobalEventsService);\n\n        this.spinner = new NullSpinner();\n    }\n\n    // *************************************\n    // abstract methods\n    // *************************************\n    protected abstract listUrl(...args: any[]): string;\n    protected abstract deleteUrl(...args: any[]): string;\n    protected abstract createUrl(...args: any[]): string;\n    protected abstract updateUrl(...args: any[]): string;\n\n    protected abstract getListGuard(): boolean;\n    protected abstract deleteByIdGuard(id: string): boolean;\n\n    protected abstract notifyList(data: Array<T>): void;\n    protected abstract notifyDelete(id: string): void;\n    protected abstract notifyCreate(record: T);\n    protected abstract notifyUpdate(record: T);\n\n    abstract getById(id: string): T;\n    abstract getByIdAsync(id: string, mySpinner: ISpinnerService): PromiseLike<T>;\n\n    protected handleError(error: HttpErrorResponse) {\n        this.eventsService.broadcast('http-error', [error]);\n    }\n\n    public onDataChange(): Observable<Array<T>> {\n        return this.subject.asObservable();\n    }\n\n    // Default methods\n    protected parseCreateResponse(record: T, data): T {\n        const id = data;\n        record.id = id;\n        return record;\n    }\n\n    protected parseUpdateResponse(record: T, data): T {\n        return record;\n    }\n\n    protected parseListResponse(data): T[] {\n        return data;\n    }\n\n    // Returns a list of entities\n    protected listRequest(options: { [key: string]: any }): Observable<T[]> {\n        let httpParams = new HttpParams();\n        for (const k in options) {\n            if (options.hasOwnProperty(k)) {\n                httpParams = httpParams.set(k, options[k]);\n            }\n        }\n\n        return this.http.get<T[]>(this.listUrl(), {\n            withCredentials: this.withCredentialOnRequest,\n            params: httpParams\n        });\n    }\n\n    getListAsync(options: { [key: string]: any }, mySpinner: ISpinnerService = null): PromiseLike<any> {\n        // In most cases, we do not need to send out a request\n        // if we already have some data.\n        if (this.getListGuard()) {\n            return liftIntoReject('not allowed');\n        }\n\n        const spinner = mySpinner || this.spinner;\n\n        spinner.show();\n        return toPromise(this.listRequest(options))\n            .then((data) => {\n                spinner.hide();\n\n                const newData = this.parseListResponse(data);\n                this.notifyList(newData);\n\n                return newData;\n            }, (error) => {\n                spinner.hide();\n\n                this.handleError(error);\n\n                return error;\n            });\n    }\n\n    // Use post instead of delete method to implement delelete ??\n    protected deleteByIdRequest(id: string): Observable<{}> {\n        return this.http.delete(this.deleteUrl(id), {\n            withCredentials: this.withCredentialOnRequest\n        });\n    }\n\n    deleteByIdAsync(id: string, mySpinner: ISpinnerService = null): PromiseLike<any> {\n\n        if (this.deleteByIdGuard(id)) {\n            return liftIntoReject('not allowed');\n        }\n\n        const spinner = mySpinner || this.spinner;\n        spinner.show();\n        return toPromise(this.deleteByIdRequest(id))\n            .then((x) => {\n                spinner.hide();\n\n                this.notifyDelete(id);\n                return id;\n            }, (error) => {\n                spinner.hide();\n\n                this.handleError(error);\n\n                return error;\n            });\n    }\n\n\n    protected adaptorCreateInput(record: T): Object {\n        return record;\n    }\n\n    protected createRequest(record: T): Observable<T> {\n        const body = {};\n        const tyRecord = this.adaptorCreateInput(record);\n        for (const prop in tyRecord) {\n            if (tyRecord.hasOwnProperty(prop)) {\n                body[prop] = tyRecord[prop];\n            }\n        }\n        return this.http.post<T>(this.createUrl(), body, {\n            withCredentials: this.withCredentialOnRequest\n        });\n    }\n\n    createAsync(record: T, mySpinner: ISpinnerService = null): PromiseLike<any> {\n\n        const spinner = mySpinner || this.spinner;\n        spinner.show();\n        return toPromise(this.createRequest(record))\n            .then((x) => {\n                spinner.hide();\n\n                // Side effects\n                record = this.parseCreateResponse(record, x);\n                this.notifyCreate(record);\n\n                return record;\n            }, (error) => {\n                spinner.hide();\n\n                this.handleError(error);\n\n                return error;\n            });\n    }\n\n    protected adaptorUpdateInput(record: T): Object {\n        return record;\n    }\n\n    protected updateRequest(record: T): Observable<T> {\n        const body = {};\n        const tyRecord = this.adaptorUpdateInput(record);\n        for (const prop in tyRecord) {\n            if (tyRecord.hasOwnProperty(prop)) {\n                body[prop] = tyRecord[prop];\n            }\n        }\n\n        return this.http.put<T>(this.updateUrl(record.id), body, {\n            withCredentials: this.withCredentialOnRequest\n        });\n    }\n\n    updateAsync(record: T, mySpinner: ISpinnerService = null): PromiseLike<any> {\n\n        const spinner = mySpinner || this.spinner;\n        spinner.show();\n        return toPromise(this.updateRequest(record))\n            .then((x) => {\n                spinner.hide();\n\n                // Side effects\n                record = this.parseUpdateResponse(record, x);\n                this.notifyUpdate(record);\n\n                return record;\n            }, (error) => {\n                spinner.hide();\n\n                // TODO: error handling\n                this.handleError(error);\n\n                return error;\n            });\n    }\n\n}\n","import { Injector } from '@angular/core';\n\nimport { IRelationalTable } from '@polpware/fe-data';\n\nimport { lift } from '@polpware/fe-utilities';\n\nimport {\n    ISpinnerService\n} from '@polpware/ngx-spinner';\n\nimport {\n    ObservableCurdService,\n    IBaseEntity\n} from './observable-crud.service';\n\nexport {\n    IBaseEntity\n} from './observable-crud.service';\n\nexport abstract class ObservableDuetTableService<T extends IBaseEntity>\n    extends ObservableCurdService<T> {\n\n    protected primaryTable: IRelationalTable;\n    protected secondaryTable: IRelationalTable;\n\n    constructor(injector: Injector) {\n        super(injector);\n    }\n\n    private buildPublishData() {\n        const models = this.primaryTable.dataProvider().models as Array<any>;\n        const data = models.map((x) => x.attributes as T);\n        return data;\n    }\n\n    protected listenToPrimaryTable() {\n        this.primaryTable.dataProvider().on('update', () => {\n            console.log('Received pimary table updates');\n            const data = this.buildPublishData();\n            this.subject.next(data);\n        });\n    }\n\n    protected publishInitData() {\n        const data = this.buildPublishData();\n        this.subject.next(data);\n    }\n\n    // Override\n    protected getListGuard(): boolean {\n        return false;\n    }\n\n    // Implement\n    getById(id: string): T {\n        const model = this.primaryTable.get(id);\n        if (model) {\n            return model.attributes as T;\n        }\n        return null;\n    }\n\n    getByIdAsync(id: string, mySpinner: ISpinnerService = null): PromiseLike<T> {\n        throw new Error('Not implemented');\n    }\n\n    // Override\n    protected deleteByIdGuard(id: string) {\n        return false;\n    }\n\n    // Override\n    protected notifyDelete(id: string) {\n        // Side effects\n        const model = this.primaryTable.get(id);\n        if (model) {\n            model.destroyFromTable();\n        }\n    }\n\n    // Override\n    protected notifyCreate(record: T) {\n        this.primaryTable.add(record);\n    }\n\n    protected notifyUpdate(record: T) {\n        // The following op basically update what we have ...\n        this.primaryTable.add(record);\n    }\n}\n","/*\n * Public API Surface of ngx-net-crud\n */\n\nexport * from './lib/services/observable-crud.service';\nexport * from './lib/services/observable-duet-table.service';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}