import { ObservableCurdService } from './observable-crud.service';
export class ObservableDuetTableService extends ObservableCurdService {
    constructor(injector) {
        super(injector);
    }
    buildPublishData() {
        const models = this.primaryTable.dataProvider().models;
        const data = models.map((x) => x.attributes);
        return data;
    }
    listenToPrimaryTable() {
        this.primaryTable.dataProvider().on('update', () => {
            console.log('Received pimary table updates');
            const data = this.buildPublishData();
            this.subject.next(data);
        });
    }
    publishInitData() {
        const data = this.buildPublishData();
        this.subject.next(data);
    }
    // Override
    getListGuard() {
        return false;
    }
    // Implement
    getById(id) {
        const model = this.primaryTable.get(id);
        if (model) {
            return model.attributes;
        }
        return null;
    }
    getByIdAsync(id, mySpinner = null) {
        throw new Error('Not implemented');
    }
    // Override
    deleteByIdGuard(id) {
        return false;
    }
    // Override
    notifyDelete(id) {
        // Side effects
        const model = this.primaryTable.get(id);
        if (model) {
            model.destroyFromTable();
        }
    }
    // Override
    notifyCreate(record) {
        this.primaryTable.add(record);
    }
    notifyUpdate(record) {
        // The following op basically update what we have ...
        this.primaryTable.add(record);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS1kdWV0LXRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb2xwd2FyZS9uZ3gtbmV0LWNydWQvc3JjL2xpYi9zZXJ2aWNlcy9vYnNlcnZhYmxlLWR1ZXQtdGFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVQSxPQUFPLEVBQ0gscUJBQXFCLEVBRXhCLE1BQU0sMkJBQTJCLENBQUM7QUFNbkMsTUFBTSxPQUFnQiwwQkFDbEIsU0FBUSxxQkFBd0I7SUFLaEMsWUFBWSxRQUFrQjtRQUMxQixLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQW9CLENBQUM7UUFDckUsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQWUsQ0FBQyxDQUFDO1FBQ2xELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFUyxvQkFBb0I7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7WUFDN0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRVMsZUFBZTtRQUNyQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVztJQUNELFlBQVk7UUFDbEIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELFlBQVk7SUFDWixPQUFPLENBQUMsRUFBVTtRQUNkLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksS0FBSyxFQUFFO1lBQ1AsT0FBTyxLQUFLLENBQUMsVUFBZSxDQUFDO1NBQ2hDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFlBQVksQ0FBQyxFQUFVLEVBQUUsWUFBNkIsSUFBSTtRQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELFdBQVc7SUFDRCxlQUFlLENBQUMsRUFBVTtRQUNoQyxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsV0FBVztJQUNELFlBQVksQ0FBQyxFQUFVO1FBQzdCLGVBQWU7UUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLEtBQUssRUFBRTtZQUNQLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztJQUVELFdBQVc7SUFDRCxZQUFZLENBQUMsTUFBUztRQUM1QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRVMsWUFBWSxDQUFDLE1BQVM7UUFDNUIscURBQXFEO1FBQ3JELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElSZWxhdGlvbmFsVGFibGUgfSBmcm9tICdAcG9scHdhcmUvZmUtZGF0YSc7XG5cbmltcG9ydCB7IGxpZnQgfSBmcm9tICdAcG9scHdhcmUvZmUtdXRpbGl0aWVzJztcblxuaW1wb3J0IHtcbiAgICBJU3Bpbm5lclNlcnZpY2Vcbn0gZnJvbSAnQHBvbHB3YXJlL25neC1zcGlubmVyJztcblxuaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlQ3VyZFNlcnZpY2UsXG4gICAgSUJhc2VFbnRpdHlcbn0gZnJvbSAnLi9vYnNlcnZhYmxlLWNydWQuc2VydmljZSc7XG5cbmV4cG9ydCB7XG4gICAgSUJhc2VFbnRpdHlcbn0gZnJvbSAnLi9vYnNlcnZhYmxlLWNydWQuc2VydmljZSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPYnNlcnZhYmxlRHVldFRhYmxlU2VydmljZTxUIGV4dGVuZHMgSUJhc2VFbnRpdHk+XG4gICAgZXh0ZW5kcyBPYnNlcnZhYmxlQ3VyZFNlcnZpY2U8VD4ge1xuXG4gICAgcHJvdGVjdGVkIHByaW1hcnlUYWJsZTogSVJlbGF0aW9uYWxUYWJsZTtcbiAgICBwcm90ZWN0ZWQgc2Vjb25kYXJ5VGFibGU6IElSZWxhdGlvbmFsVGFibGU7XG5cbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICAgICAgc3VwZXIoaW5qZWN0b3IpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRQdWJsaXNoRGF0YSgpIHtcbiAgICAgICAgY29uc3QgbW9kZWxzID0gdGhpcy5wcmltYXJ5VGFibGUuZGF0YVByb3ZpZGVyKCkubW9kZWxzIGFzIEFycmF5PGFueT47XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtb2RlbHMubWFwKCh4KSA9PiB4LmF0dHJpYnV0ZXMgYXMgVCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBsaXN0ZW5Ub1ByaW1hcnlUYWJsZSgpIHtcbiAgICAgICAgdGhpcy5wcmltYXJ5VGFibGUuZGF0YVByb3ZpZGVyKCkub24oJ3VwZGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBwaW1hcnkgdGFibGUgdXBkYXRlcycpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuYnVpbGRQdWJsaXNoRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBwdWJsaXNoSW5pdERhdGEoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmJ1aWxkUHVibGlzaERhdGEoKTtcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoZGF0YSk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGVcbiAgICBwcm90ZWN0ZWQgZ2V0TGlzdEd1YXJkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSW1wbGVtZW50XG4gICAgZ2V0QnlJZChpZDogc3RyaW5nKTogVCB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5wcmltYXJ5VGFibGUuZ2V0KGlkKTtcbiAgICAgICAgaWYgKG1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWwuYXR0cmlidXRlcyBhcyBUO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldEJ5SWRBc3luYyhpZDogc3RyaW5nLCBteVNwaW5uZXI6IElTcGlubmVyU2VydmljZSA9IG51bGwpOiBQcm9taXNlTGlrZTxUPiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGVcbiAgICBwcm90ZWN0ZWQgZGVsZXRlQnlJZEd1YXJkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlXG4gICAgcHJvdGVjdGVkIG5vdGlmeURlbGV0ZShpZDogc3RyaW5nKSB7XG4gICAgICAgIC8vIFNpZGUgZWZmZWN0c1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMucHJpbWFyeVRhYmxlLmdldChpZCk7XG4gICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgICAgbW9kZWwuZGVzdHJveUZyb21UYWJsZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGVcbiAgICBwcm90ZWN0ZWQgbm90aWZ5Q3JlYXRlKHJlY29yZDogVCkge1xuICAgICAgICB0aGlzLnByaW1hcnlUYWJsZS5hZGQocmVjb3JkKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgbm90aWZ5VXBkYXRlKHJlY29yZDogVCkge1xuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIG9wIGJhc2ljYWxseSB1cGRhdGUgd2hhdCB3ZSBoYXZlIC4uLlxuICAgICAgICB0aGlzLnByaW1hcnlUYWJsZS5hZGQocmVjb3JkKTtcbiAgICB9XG59XG4iXX0=